local function a(b,c)b.AnimState:SetBank(c.bank)b.AnimState:SetBuild(c.build)if c.animpush then b.AnimState:PlayAnimation(c.anim)b.AnimState:PushAnimation(c.animpush,c.isloop)else b.AnimState:PlayAnimation(c.anim,c.isloop)end end;local function d(b,e)if e.floater~=nil then if e.floater.fn_anim~=nil then b.components.floater.SwitchToFloatAnim=function(f,...)e.floater.fn_anim(f.inst)end elseif e.floater.anim~=nil then b.components.floater.SwitchToFloatAnim=function(f,...)a(f.inst,e.floater.anim)end else b.components.floater.SwitchToFloatAnim=function(f,...)end end else b.components.floater.SwitchToFloatAnim=function(f,...)end end;if e.fn_anim~=nil then b.components.floater.SwitchToDefaultAnim=function(f,...)e.fn_anim(f.inst)end elseif e.anim~=nil and e.anim.setable then b.components.floater.SwitchToDefaultAnim=function(f,...)a(f.inst,e.anim)end else b.components.floater.SwitchToDefaultAnim=function(f,...)end end end;local g=Class(function(self,b)self.inst=b;self.isServe=TheNet:GetIsMasterSimulation()self.isClient=not TheNet:IsDedicated()self.skin=nil;self._skindata=nil;self._skin_idx=net_byte(b.GUID,"skinedlegion._skin_idx","skin_idx_l_dirty")self._floater_cut=nil;self._floater_nofx=nil;if not self.isServe and self.isClient then self.inst:ListenForEvent("skin_idx_l_dirty",function()local h=self._skin_idx:value()if h~=nil and h~=0 and SKIN_IDX_LEGION[h]~=nil then self.skin=SKIN_IDX_LEGION[h]self.inst.skinname=self.skin else self.skin=nil;self.inst.skinname=nil end;self:OnSetSkinClient(self:GetSkinData(self.skin),self._skindata)end)end end)function g:GetSkin()return self.skin end;function g:GetSkinData(i)return i==nil and SKIN_PREFABS_LEGION[self.inst.prefab]or SKINS_LEGION[i]end;function g:GetSkinedData()return self._skindata end;function g:GetLinkedSkins()if self._skindata~=nil then return self._skindata.linkedskins else return nil end end;function g:Init(j)self._skindata=SKIN_PREFABS_LEGION[j]end;function g:InitWithFloater(j)local e=SKIN_PREFABS_LEGION[j]self._skindata=e;if e~=nil and e.floater~=nil then local c=e.floater;self.inst:AddComponent("floater")if not c.nofx then self.inst.components.floater:SetSize(c.size or"small")if c.offset_y~=nil then self.inst.components.floater:SetVerticalOffset(c.offset_y)end;if c.scale~=nil then self.inst.components.floater:SetScale(c.scale)end end;d(self.inst,e)self._floater_cut=c.cut;self._floater_nofx=c.nofx;local k=self.inst.components.floater.OnLandedClient;self.inst.components.floater.OnLandedClient=function(f,...)if self._floater_nofx then f.showing_effect=true else k(f,...)if self._floater_cut~=nil then f.inst.AnimState:SetFloatParams(self._floater_cut,1,f.bob_percent)end end end else MakeInventoryFloatable(self.inst)end end;local l={orchitwigs_disguiser=true,hat_lichen_disguiser=true,hat_cowboy_tvplay=true,pinkstaff_tvplay=true,shield_l_log_emo_pride=true,shield_l_sand_op=true,backcub_fans=true}function g:SetLinkedSkin(m,n,o)local p=self:GetLinkedSkins()or nil;if p~=nil and p[n]~=nil then m.components.skinedlegion:SetSkin(p[n],self.userid or(o and o.userid or nil))end end;function g:SpawnLinkedSkinLoot(q,r,n,o)local p=self:GetLinkedSkins()or nil;if p~=nil and p[n]~=nil then r.components.lootdropper:SpawnLootPrefab(q,nil,p[n],nil,self.userid or(o and o.userid or nil))else r.components.lootdropper:SpawnLootPrefab(q)end end;function g:SetSkin(i,s)if not self.isServe or self.skin==i then return true end;if i~=nil and not l[i]then if s~=nil then if SKINS_CACHE_L[s]==nil or not SKINS_CACHE_L[s][i]then s=nil end end;if s==nil then for t,u in pairs(SKINS_CACHE_L)do if u[i]then s=t;break end end end;if s==nil then self.inst:DoTaskInTime(20+8*math.random(),function(b)if self.skin==nil then return end;if self.userid~=nil then if SKINS_CACHE_L[self.userid]==nil or not SKINS_CACHE_L[self.userid][self.skin]then self.userid=nil else return end end;if self.userid==nil then for t,u in pairs(SKINS_CACHE_L)do if u[self.skin]then self.userid=t;return end end end;self:SetSkin(nil)end)end end;local v=self:GetSkinData(i)if v~=nil then self:OnSetSkinServer(v,self._skindata)if i==nil then self._skin_idx:set(0)self.skin=nil;self.userid=nil;self.inst.skinname=nil else self._skin_idx:set(v.skin_idx)self.skin=i;self.userid=s;self.inst.skinname=i end;self._skindata=v;return true end;return false end;function g:OnSave()if self.skin~=nil then return{skin=self.skin,userid=self.userid}else return nil end end;function g:OnLoad(c)if c==nil then return end;if c.skin~=nil then self.skin=nil;self.inst.skinname=nil;self.userid=c.userid;self._skindata=self:GetSkinData()self:SetSkin(c.skin,self.userid)end end;function g:SetOnPreLoad(w)self.inst.OnPreLoad=function(b,c,...)if c~=nil then if c.skin~=nil then self.skin=c.skin;self.userid=c.userid;self.inst.skinname=c.skin;self._skindata=self:GetSkinData(c.skin)end end;if w~=nil then w(b,c,...)end end end;function g:SpawnSkinExchangeFx(i,x)local e=i==nil and self._skindata or self:GetSkinData(i)if e~=nil then if e.fn_spawnSkinExchangeFx~=nil then e.fn_spawnSkinExchangeFx(self.inst)elseif e.exchangefx~=nil then local y=nil;if e.exchangefx.prefab~=nil then y=SpawnPrefab(e.exchangefx.prefab)elseif x~=nil then y="explode_reskin"local z=SKIN_FX_PREFAB[x:GetSkinName()]if z~=nil and z[1]~=nil then y=z[1]end;y=SpawnPrefab(y)end;if y~=nil then if e.exchangefx.scale~=nil then y.Transform:SetScale(e.exchangefx.scale,e.exchangefx.scale,e.exchangefx.scale)end;if e.exchangefx.offset_y~=nil then local A,B,C=self.inst.Transform:GetWorldPosition()B=B+e.exchangefx.offset_y;y.Transform:SetPosition(A,B,C)else y.Transform:SetPosition(self.inst.Transform:GetWorldPosition())end end end end end;function g:OnSetSkinServer(e,D)local b=self.inst;if D~=nil then if D.fn_end~=nil then D.fn_end(b)end end;if e~=nil then if e.fn_anim~=nil or e.anim~=nil and e.anim.setable then local E=false;if b.components.floater~=nil then if b.components.floater:IsFloating()then if e.floater~=nil then if e.floater.fn_anim~=nil then e.floater.fn_anim(b)E=true elseif e.floater.anim~=nil then a(b,e.floater.anim)E=true end end end end;if not E then if e.fn_anim~=nil then e.fn_anim(b)elseif e.anim~=nil and e.anim.setable then a(b,e.anim)end end end;if b.components.inventoryitem~=nil and e.image~=nil and e.image.setable then b.components.inventoryitem.atlasname=e.image.atlas;b.components.inventoryitem:ChangeImageName(e.image.name)end;if b.components.floater~=nil and e.floater~=nil then if not e.floater.nofx then b.components.floater:SetSize(e.floater.size or"small")b.components.floater:SetVerticalOffset(e.floater.offset_y or 0)b.components.floater:SetScale(e.floater.scale or 1)end;d(b,e)self._floater_cut=e.floater.cut;self._floater_nofx=e.floater.nofx;if self.isClient and b.components.floater:IsFloating()then b.components.floater:OnNoLongerLandedClient()b.components.floater:OnLandedClient()end end;if e.placer~=nil then b.overridedeployplacername=e.placer.name else b.overridedeployplacername=nil end;if e.fn_start~=nil then e.fn_start(b)end end end;function g:OnSetSkinClient(e,D)self._skindata=e;local b=self.inst;if D~=nil then if D.fn_end_c~=nil then D.fn_end_c(b)end end;if e~=nil then if b.components.floater~=nil and e.floater~=nil then self._floater_cut=e.floater.cut;self._floater_nofx=e.floater.nofx;if not self._floater_nofx then b.components.floater:SetSize(e.floater.size)b.components.floater:SetVerticalOffset(e.floater.offset_y or 0)b.components.floater:SetScale(e.floater.scale or 1)end;if b.components.floater:IsFloating()then b.components.floater:OnNoLongerLandedClient()b.components.floater:OnLandedClient()end end;if e.placer~=nil then b.overridedeployplacername=e.placer.name else b.overridedeployplacername=nil end;if e.fn_start_c~=nil then e.fn_start_c(b)end end end;return g